/* automatically generated by rust-bindgen 0.58.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 9;
pub const __GLIBCXX__: u32 = 20200808;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
pub const STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_HOSTED: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INT128: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const IOX_C_CHUNK_DEFAULT_USER_PAYLOAD_ALIGNMENT: u32 = 8;
pub const IOX_C_CHUNK_NO_USER_HEADER_SIZE: u32 = 0;
pub const IOX_C_CHUNK_NO_USER_HEADER_ALIGNMENT: u32 = 1;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const _BITS_TIMEX_H: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
pub const ADJ_OFFSET_SS_READ: u32 = 40961;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_CLKB: u32 = 16384;
pub const MOD_CLKA: u32 = 32769;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub type std_size_t = ::std::os::raw::c_ulong;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const iox_SubscriberState_SubscriberState_HAS_DATA: iox_SubscriberState = 0;
pub type iox_SubscriberState = ::std::os::raw::c_uint;
pub const iox_SubscriberEvent_SubscriberEvent_DATA_RECEIVED: iox_SubscriberEvent = 0;
pub type iox_SubscriberEvent = ::std::os::raw::c_uint;
pub const iox_SubscribeState_SubscribeState_NOT_SUBSCRIBED: iox_SubscribeState = 0;
pub const iox_SubscribeState_SubscribeState_SUBSCRIBE_REQUESTED: iox_SubscribeState = 1;
pub const iox_SubscribeState_SubscribeState_SUBSCRIBED: iox_SubscribeState = 2;
pub const iox_SubscribeState_SubscribeState_UNSUBSCRIBE_REQUESTED: iox_SubscribeState = 3;
pub const iox_SubscribeState_SubscribeState_WAIT_FOR_OFFER: iox_SubscribeState = 4;
pub const iox_SubscribeState_SubscribeState_UNDEFINED_ERROR: iox_SubscribeState = 5;
pub type iox_SubscribeState = ::std::os::raw::c_uint;
pub const iox_ChunkReceiveResult_ChunkReceiveResult_TOO_MANY_CHUNKS_HELD_IN_PARALLEL:
    iox_ChunkReceiveResult = 0;
pub const iox_ChunkReceiveResult_ChunkReceiveResult_NO_CHUNK_AVAILABLE: iox_ChunkReceiveResult = 1;
pub const iox_ChunkReceiveResult_ChunkReceiveResult_UNDEFINED_ERROR: iox_ChunkReceiveResult = 2;
pub const iox_ChunkReceiveResult_ChunkReceiveResult_SUCCESS: iox_ChunkReceiveResult = 3;
pub type iox_ChunkReceiveResult = ::std::os::raw::c_uint;
pub const iox_QueueFullPolicy_QueueFullPolicy_BLOCK_PUBLISHER: iox_QueueFullPolicy = 0;
pub const iox_QueueFullPolicy_QueueFullPolicy_DISCARD_OLDEST_DATA: iox_QueueFullPolicy = 1;
pub type iox_QueueFullPolicy = ::std::os::raw::c_uint;
pub const iox_SubscriberTooSlowPolicy_SubscriberTooSlowPolicy_WAIT_FOR_SUBSCRIBER:
    iox_SubscriberTooSlowPolicy = 0;
pub const iox_SubscriberTooSlowPolicy_SubscriberTooSlowPolicy_DISCARD_OLDEST_DATA:
    iox_SubscriberTooSlowPolicy = 1;
pub type iox_SubscriberTooSlowPolicy = ::std::os::raw::c_uint;
pub const iox_AllocationResult_AllocationResult_RUNNING_OUT_OF_CHUNKS: iox_AllocationResult = 0;
pub const iox_AllocationResult_AllocationResult_TOO_MANY_CHUNKS_ALLOCATED_IN_PARALLEL:
    iox_AllocationResult = 1;
pub const iox_AllocationResult_AllocationResult_INVALID_CHUNK: iox_AllocationResult = 2;
pub const iox_AllocationResult_AllocationResult_INVALID_PARAMETER_FOR_USER_PAYLOAD_OR_USER_HEADER : iox_AllocationResult = 3 ;
pub const iox_AllocationResult_AllocationResult_UNDEFINED_ERROR: iox_AllocationResult = 4;
pub const iox_AllocationResult_AllocationResult_INVALID_PARAMETER_FOR_CHUNK: iox_AllocationResult =
    5;
pub const iox_AllocationResult_AllocationResult_SUCCESS: iox_AllocationResult = 6;
pub type iox_AllocationResult = ::std::os::raw::c_uint;
pub const iox_WaitSetResult_WaitSetResult_WAIT_SET_FULL: iox_WaitSetResult = 0;
pub const iox_WaitSetResult_WaitSetResult_ALREADY_ATTACHED: iox_WaitSetResult = 1;
pub const iox_WaitSetResult_WaitSetResult_UNDEFINED_ERROR: iox_WaitSetResult = 2;
pub const iox_WaitSetResult_WaitSetResult_SUCCESS: iox_WaitSetResult = 3;
pub type iox_WaitSetResult = ::std::os::raw::c_uint;
pub const iox_ListenerResult_ListenerResult_LISTENER_FULL: iox_ListenerResult = 0;
pub const iox_ListenerResult_ListenerResult_EVENT_ALREADY_ATTACHED: iox_ListenerResult = 1;
pub const iox_ListenerResult_ListenerResult_EMPTY_INVALIDATION_CALLBACK: iox_ListenerResult = 2;
pub const iox_ListenerResult_ListenerResult_UNDEFINED_ERROR: iox_ListenerResult = 3;
pub const iox_ListenerResult_ListenerResult_SUCCESS: iox_ListenerResult = 4;
pub type iox_ListenerResult = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iox_service_description_t {
    pub serviceId: u16,
    pub instanceId: u16,
    pub eventId: u16,
    pub serviceString: [::std::os::raw::c_char; 100usize],
    pub instanceString: [::std::os::raw::c_char; 100usize],
    pub eventString: [::std::os::raw::c_char; 100usize],
}
#[test]
fn bindgen_test_layout_iox_service_description_t() {
    assert_eq!(
        ::std::mem::size_of::<iox_service_description_t>(),
        306usize,
        concat!("Size of: ", stringify!(iox_service_description_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_service_description_t>(),
        2usize,
        concat!("Alignment of ", stringify!(iox_service_description_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_service_description_t>())).serviceId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_service_description_t),
            "::",
            stringify!(serviceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_service_description_t>())).instanceId as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_service_description_t),
            "::",
            stringify!(instanceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_service_description_t>())).eventId as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_service_description_t),
            "::",
            stringify!(eventId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_service_description_t>())).serviceString as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_service_description_t),
            "::",
            stringify!(serviceString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_service_description_t>())).instanceString as *const _
                as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_service_description_t),
            "::",
            stringify!(instanceString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_service_description_t>())).eventString as *const _ as usize
        },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_service_description_t),
            "::",
            stringify!(eventString)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iox_ws_storage_t_ {
    pub do_not_touch_me: [u64; 2965usize],
}
#[test]
fn bindgen_test_layout_iox_ws_storage_t_() {
    assert_eq!(
        ::std::mem::size_of::<iox_ws_storage_t_>(),
        23720usize,
        concat!("Size of: ", stringify!(iox_ws_storage_t_))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_ws_storage_t_>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_ws_storage_t_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_ws_storage_t_>())).do_not_touch_me as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_ws_storage_t_),
            "::",
            stringify!(do_not_touch_me)
        )
    );
}
pub type iox_ws_storage_t = iox_ws_storage_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iox_user_trigger_storage_t_ {
    pub do_not_touch_me: [u64; 14usize],
}
#[test]
fn bindgen_test_layout_iox_user_trigger_storage_t_() {
    assert_eq!(
        ::std::mem::size_of::<iox_user_trigger_storage_t_>(),
        112usize,
        concat!("Size of: ", stringify!(iox_user_trigger_storage_t_))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_user_trigger_storage_t_>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_user_trigger_storage_t_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_user_trigger_storage_t_>())).do_not_touch_me as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_user_trigger_storage_t_),
            "::",
            stringify!(do_not_touch_me)
        )
    );
}
pub type iox_user_trigger_storage_t = iox_user_trigger_storage_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iox_sub_storage_t_ {
    pub do_not_touch_me: [u64; 14usize],
}
#[test]
fn bindgen_test_layout_iox_sub_storage_t_() {
    assert_eq!(
        ::std::mem::size_of::<iox_sub_storage_t_>(),
        112usize,
        concat!("Size of: ", stringify!(iox_sub_storage_t_))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_sub_storage_t_>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_sub_storage_t_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_sub_storage_t_>())).do_not_touch_me as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_storage_t_),
            "::",
            stringify!(do_not_touch_me)
        )
    );
}
pub type iox_sub_storage_t = iox_sub_storage_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iox_pub_storage_t_ {
    pub do_not_touch_me: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_iox_pub_storage_t_() {
    assert_eq!(
        ::std::mem::size_of::<iox_pub_storage_t_>(),
        16usize,
        concat!("Size of: ", stringify!(iox_pub_storage_t_))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_pub_storage_t_>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_pub_storage_t_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_pub_storage_t_>())).do_not_touch_me as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_pub_storage_t_),
            "::",
            stringify!(do_not_touch_me)
        )
    );
}
pub type iox_pub_storage_t = iox_pub_storage_t_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iox_listener_storage_t_ {
    pub do_not_touch_me: [u64; 2567usize],
}
#[test]
fn bindgen_test_layout_iox_listener_storage_t_() {
    assert_eq!(
        ::std::mem::size_of::<iox_listener_storage_t_>(),
        20536usize,
        concat!("Size of: ", stringify!(iox_listener_storage_t_))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_listener_storage_t_>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_listener_storage_t_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_listener_storage_t_>())).do_not_touch_me as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_listener_storage_t_),
            "::",
            stringify!(do_not_touch_me)
        )
    );
}
pub type iox_listener_storage_t = iox_listener_storage_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iox_chunk_header_t {
    pub do_not_touch_me: [u8; 1usize],
}
#[test]
fn bindgen_test_layout_iox_chunk_header_t() {
    assert_eq!(
        ::std::mem::size_of::<iox_chunk_header_t>(),
        1usize,
        concat!("Size of: ", stringify!(iox_chunk_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_chunk_header_t>(),
        1usize,
        concat!("Alignment of ", stringify!(iox_chunk_header_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_chunk_header_t>())).do_not_touch_me as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_chunk_header_t),
            "::",
            stringify!(do_not_touch_me)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpp2c_Subscriber {
    _unused: [u8; 0],
}
pub type iox_sub_t = *mut cpp2c_Subscriber;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iox_sub_options_t {
    pub queueCapacity: u64,
    pub historyRequest: u64,
    pub nodeName: *const ::std::os::raw::c_char,
    pub subscribeOnCreate: bool,
    pub queueFullPolicy: iox_QueueFullPolicy,
    pub initCheck: u64,
}
#[test]
fn bindgen_test_layout_iox_sub_options_t() {
    assert_eq!(
        ::std::mem::size_of::<iox_sub_options_t>(),
        40usize,
        concat!("Size of: ", stringify!(iox_sub_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_sub_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_sub_options_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iox_sub_options_t>())).queueCapacity as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_options_t),
            "::",
            stringify!(queueCapacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_sub_options_t>())).historyRequest as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_options_t),
            "::",
            stringify!(historyRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iox_sub_options_t>())).nodeName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_options_t),
            "::",
            stringify!(nodeName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_sub_options_t>())).subscribeOnCreate as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_options_t),
            "::",
            stringify!(subscribeOnCreate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_sub_options_t>())).queueFullPolicy as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_options_t),
            "::",
            stringify!(queueFullPolicy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iox_sub_options_t>())).initCheck as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_options_t),
            "::",
            stringify!(initCheck)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_Z20iox_sub_options_initP17iox_sub_options_t"]
    pub fn iox_sub_options_init(options: *mut iox_sub_options_t);
}
extern "C" {
    #[link_name = "\u{1}_Z30iox_sub_options_is_initializedPK17iox_sub_options_t"]
    pub fn iox_sub_options_is_initialized(options: *const iox_sub_options_t) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z12iox_sub_initP18iox_sub_storage_t_PKcS2_S2_PK17iox_sub_options_t"]
    pub fn iox_sub_init(
        self_: *mut iox_sub_storage_t,
        service: *const ::std::os::raw::c_char,
        instance: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        options: *const iox_sub_options_t,
    ) -> iox_sub_t;
}
extern "C" {
    #[link_name = "\u{1}_Z14iox_sub_deinitP16cpp2c_Subscriber"]
    pub fn iox_sub_deinit(self_: iox_sub_t);
}
extern "C" {
    #[link_name = "\u{1}_Z17iox_sub_subscribeP16cpp2c_Subscriber"]
    pub fn iox_sub_subscribe(self_: iox_sub_t);
}
extern "C" {
    #[link_name = "\u{1}_Z19iox_sub_unsubscribeP16cpp2c_Subscriber"]
    pub fn iox_sub_unsubscribe(self_: iox_sub_t);
}
extern "C" {
    #[link_name = "\u{1}_Z30iox_sub_get_subscription_stateP16cpp2c_Subscriber"]
    pub fn iox_sub_get_subscription_state(self_: iox_sub_t) -> iox_SubscribeState;
}
extern "C" {
    #[link_name = "\u{1}_Z18iox_sub_take_chunkP16cpp2c_SubscriberPPKv"]
    pub fn iox_sub_take_chunk(
        self_: iox_sub_t,
        userPayload: *mut *const ::std::os::raw::c_void,
    ) -> iox_ChunkReceiveResult;
}
extern "C" {
    #[link_name = "\u{1}_Z21iox_sub_release_chunkP16cpp2c_SubscriberPKv"]
    pub fn iox_sub_release_chunk(self_: iox_sub_t, userPayload: *const ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_Z29iox_sub_release_queued_chunksP16cpp2c_Subscriber"]
    pub fn iox_sub_release_queued_chunks(self_: iox_sub_t);
}
extern "C" {
    #[link_name = "\u{1}_Z18iox_sub_has_chunksP16cpp2c_Subscriber"]
    pub fn iox_sub_has_chunks(self_: iox_sub_t) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z23iox_sub_has_lost_chunksP16cpp2c_Subscriber"]
    pub fn iox_sub_has_lost_chunks(self_: iox_sub_t) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z31iox_sub_get_service_descriptionP16cpp2c_Subscriber"]
    pub fn iox_sub_get_service_description(self_: iox_sub_t) -> iox_service_description_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UserTrigger {
    _unused: [u8; 0],
}
pub type iox_user_trigger_t = *mut UserTrigger;
extern "C" {
    #[link_name = "\u{1}_Z21iox_user_trigger_initP27iox_user_trigger_storage_t_"]
    pub fn iox_user_trigger_init(self_: *mut iox_user_trigger_storage_t) -> iox_user_trigger_t;
}
extern "C" {
    #[link_name = "\u{1}_Z23iox_user_trigger_deinitP11UserTrigger"]
    pub fn iox_user_trigger_deinit(self_: iox_user_trigger_t);
}
extern "C" {
    #[link_name = "\u{1}_Z24iox_user_trigger_triggerP11UserTrigger"]
    pub fn iox_user_trigger_trigger(self_: iox_user_trigger_t);
}
extern "C" {
    #[link_name = "\u{1}_Z30iox_user_trigger_has_triggeredP11UserTrigger"]
    pub fn iox_user_trigger_has_triggered(self_: iox_user_trigger_t) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NotificationInfo {
    _unused: [u8; 0],
}
pub type iox_notification_info_t = *const NotificationInfo;
extern "C" {
    #[link_name = "\u{1}_Z41iox_notification_info_get_notification_idPK16NotificationInfo"]
    pub fn iox_notification_info_get_notification_id(self_: iox_notification_info_t) -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z52iox_notification_info_does_originate_from_subscriberPK16NotificationInfoP16cpp2c_Subscriber"]
    pub fn iox_notification_info_does_originate_from_subscriber(
        self_: iox_notification_info_t,
        subscriber: iox_sub_t,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z54iox_notification_info_does_originate_from_user_triggerPK16NotificationInfoP11UserTrigger"]
    pub fn iox_notification_info_does_originate_from_user_trigger(
        self_: iox_notification_info_t,
        user_trigger: iox_user_trigger_t,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z43iox_notification_info_get_subscriber_originPK16NotificationInfo"]
    pub fn iox_notification_info_get_subscriber_origin(self_: iox_notification_info_t)
        -> iox_sub_t;
}
extern "C" {
    #[link_name = "\u{1}_Z45iox_notification_info_get_user_trigger_originPK16NotificationInfo"]
    pub fn iox_notification_info_get_user_trigger_origin(
        self_: iox_notification_info_t,
    ) -> iox_user_trigger_t;
}
extern "C" {
    #[link_name = "\u{1}_Z26iox_notification_info_callPK16NotificationInfo"]
    pub fn iox_notification_info_call(self_: iox_notification_info_t);
}
extern "C" {
    #[link_name = "\u{1}_Z32iox_chunk_header_to_user_payloadP18iox_chunk_header_t"]
    pub fn iox_chunk_header_to_user_payload(
        chunkHeader: *mut iox_chunk_header_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z38iox_chunk_header_to_user_payload_constPK18iox_chunk_header_t"]
    pub fn iox_chunk_header_to_user_payload_const(
        chunkHeader: *const iox_chunk_header_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z31iox_chunk_header_to_user_headerP18iox_chunk_header_t"]
    pub fn iox_chunk_header_to_user_header(
        chunkHeader: *mut iox_chunk_header_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z37iox_chunk_header_to_user_header_constPK18iox_chunk_header_t"]
    pub fn iox_chunk_header_to_user_header_const(
        chunkHeader: *const iox_chunk_header_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z34iox_chunk_header_from_user_payloadPv"]
    pub fn iox_chunk_header_from_user_payload(
        userPayload: *mut ::std::os::raw::c_void,
    ) -> *mut iox_chunk_header_t;
}
extern "C" {
    #[link_name = "\u{1}_Z40iox_chunk_header_from_user_payload_constPKv"]
    pub fn iox_chunk_header_from_user_payload_const(
        userPayload: *const ::std::os::raw::c_void,
    ) -> *const iox_chunk_header_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeData {
    _unused: [u8; 0],
}
pub type iox_node_t = *mut NodeData;
extern "C" {
    #[link_name = "\u{1}_Z15iox_node_createPKc"]
    pub fn iox_node_create(nodeName: *const ::std::os::raw::c_char) -> iox_node_t;
}
extern "C" {
    #[link_name = "\u{1}_Z16iox_node_destroyP8NodeData"]
    pub fn iox_node_destroy(self_: iox_node_t);
}
extern "C" {
    #[link_name = "\u{1}_Z17iox_node_get_nameP8NodeDataPcm"]
    pub fn iox_node_get_name(
        self_: iox_node_t,
        name: *mut ::std::os::raw::c_char,
        nameCapacity: u64,
    ) -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z25iox_node_get_runtime_nameP8NodeDataPcm"]
    pub fn iox_node_get_runtime_name(
        self_: iox_node_t,
        name: *mut ::std::os::raw::c_char,
        nameCapacity: u64,
    ) -> u64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpp2c_Publisher {
    _unused: [u8; 0],
}
pub type iox_pub_t = *mut cpp2c_Publisher;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iox_pub_options_t {
    pub historyCapacity: u64,
    pub nodeName: *const ::std::os::raw::c_char,
    pub offerOnCreate: bool,
    pub subscriberTooSlowPolicy: iox_SubscriberTooSlowPolicy,
    pub initCheck: u64,
}
#[test]
fn bindgen_test_layout_iox_pub_options_t() {
    assert_eq!(
        ::std::mem::size_of::<iox_pub_options_t>(),
        32usize,
        concat!("Size of: ", stringify!(iox_pub_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_pub_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_pub_options_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_pub_options_t>())).historyCapacity as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_pub_options_t),
            "::",
            stringify!(historyCapacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iox_pub_options_t>())).nodeName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_pub_options_t),
            "::",
            stringify!(nodeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iox_pub_options_t>())).offerOnCreate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_pub_options_t),
            "::",
            stringify!(offerOnCreate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_pub_options_t>())).subscriberTooSlowPolicy as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_pub_options_t),
            "::",
            stringify!(subscriberTooSlowPolicy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iox_pub_options_t>())).initCheck as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_pub_options_t),
            "::",
            stringify!(initCheck)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_Z20iox_pub_options_initP17iox_pub_options_t"]
    pub fn iox_pub_options_init(options: *mut iox_pub_options_t);
}
extern "C" {
    #[link_name = "\u{1}_Z30iox_pub_options_is_initializedPK17iox_pub_options_t"]
    pub fn iox_pub_options_is_initialized(options: *const iox_pub_options_t) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z12iox_pub_initP18iox_pub_storage_t_PKcS2_S2_PK17iox_pub_options_t"]
    pub fn iox_pub_init(
        self_: *mut iox_pub_storage_t,
        service: *const ::std::os::raw::c_char,
        instance: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        options: *const iox_pub_options_t,
    ) -> iox_pub_t;
}
extern "C" {
    #[link_name = "\u{1}_Z14iox_pub_deinitP15cpp2c_Publisher"]
    pub fn iox_pub_deinit(self_: iox_pub_t);
}
extern "C" {
    #[link_name = "\u{1}_Z18iox_pub_loan_chunkP15cpp2c_PublisherPPvj"]
    pub fn iox_pub_loan_chunk(
        self_: iox_pub_t,
        userPayload: *mut *mut ::std::os::raw::c_void,
        userPayloadSize: u32,
    ) -> iox_AllocationResult;
}
extern "C" {
    #[link_name = "\u{1}_Z26iox_pub_loan_aligned_chunkP15cpp2c_PublisherPPvjj"]
    pub fn iox_pub_loan_aligned_chunk(
        self_: iox_pub_t,
        userPayload: *mut *mut ::std::os::raw::c_void,
        userPayloadSize: u32,
        userPayloadAlignment: u32,
    ) -> iox_AllocationResult;
}
extern "C" {
    #[link_name = "\u{1}_Z43iox_pub_loan_aligned_chunk_with_user_headerP15cpp2c_PublisherPPvjjjj"]
    pub fn iox_pub_loan_aligned_chunk_with_user_header(
        self_: iox_pub_t,
        userPayload: *mut *mut ::std::os::raw::c_void,
        userPayloadSize: u32,
        userPayloadAlignment: u32,
        userHeaderSize: u32,
        userHeaderAlignment: u32,
    ) -> iox_AllocationResult;
}
extern "C" {
    #[link_name = "\u{1}_Z21iox_pub_release_chunkP15cpp2c_PublisherPv"]
    pub fn iox_pub_release_chunk(self_: iox_pub_t, userPayload: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_Z21iox_pub_publish_chunkP15cpp2c_PublisherPv"]
    pub fn iox_pub_publish_chunk(self_: iox_pub_t, userPayload: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_Z13iox_pub_offerP15cpp2c_Publisher"]
    pub fn iox_pub_offer(self_: iox_pub_t);
}
extern "C" {
    #[link_name = "\u{1}_Z18iox_pub_stop_offerP15cpp2c_Publisher"]
    pub fn iox_pub_stop_offer(self_: iox_pub_t);
}
extern "C" {
    #[link_name = "\u{1}_Z18iox_pub_is_offeredP15cpp2c_Publisher"]
    pub fn iox_pub_is_offered(self_: iox_pub_t) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z23iox_pub_has_subscribersP15cpp2c_Publisher"]
    pub fn iox_pub_has_subscribers(self_: iox_pub_t) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z31iox_pub_get_service_descriptionP15cpp2c_Publisher"]
    pub fn iox_pub_get_service_description(self_: iox_pub_t) -> iox_service_description_t;
}
extern "C" {
    #[link_name = "\u{1}_Z16iox_runtime_initPKc"]
    pub fn iox_runtime_init(name: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_Z29iox_runtime_get_instance_namePcm"]
    pub fn iox_runtime_get_instance_name(name: *mut ::std::os::raw::c_char, nameLength: u64)
        -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z20iox_runtime_shutdownv"]
    pub fn iox_runtime_shutdown();
}
pub type size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: __syscall_slong_t,
    pub freq: __syscall_slong_t,
    pub maxerror: __syscall_slong_t,
    pub esterror: __syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: __syscall_slong_t,
    pub precision: __syscall_slong_t,
    pub tolerance: __syscall_slong_t,
    pub time: timeval,
    pub tick: __syscall_slong_t,
    pub ppsfreq: __syscall_slong_t,
    pub jitter: __syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: __syscall_slong_t,
    pub jitcnt: __syscall_slong_t,
    pub calcnt: __syscall_slong_t,
    pub errcnt: __syscall_slong_t,
    pub stbcnt: __syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
}
#[test]
fn bindgen_test_layout_timex() {
    assert_eq!(
        ::std::mem::size_of::<timex>(),
        208usize,
        concat!("Size of: ", stringify!(timex))
    );
    assert_eq!(
        ::std::mem::align_of::<timex>(),
        8usize,
        concat!("Alignment of ", stringify!(timex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).modes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(modes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).freq as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).maxerror as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(maxerror)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).esterror as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(esterror)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).status as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).constant as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).precision as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(precision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).tolerance as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tolerance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).time as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).tick as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).ppsfreq as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(ppsfreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).jitter as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(jitter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).shift as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).stabil as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(stabil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).jitcnt as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(jitcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).calcnt as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(calcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).errcnt as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(errcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).stbcnt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(stbcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).tai as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tai)
        )
    );
}
extern "C" {
    pub fn clock_adjtime(__clock_id: __clockid_t, __utx: *mut timex) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn strptime(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strptime_l(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
        __loc: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn getdate_r(
        __string: *const ::std::os::raw::c_char,
        __resbufp: *mut tm,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpp2c_WaitSet {
    _unused: [u8; 0],
}
pub type iox_ws_t = *mut cpp2c_WaitSet;
extern "C" {
    #[link_name = "\u{1}_Z11iox_ws_initP17iox_ws_storage_t_"]
    pub fn iox_ws_init(self_: *mut iox_ws_storage_t) -> iox_ws_t;
}
extern "C" {
    #[link_name = "\u{1}_Z13iox_ws_deinitP13cpp2c_WaitSet"]
    pub fn iox_ws_deinit(self_: iox_ws_t);
}
extern "C" {
    #[link_name = "\u{1}_Z17iox_ws_timed_waitP13cpp2c_WaitSet8timespecPPK16NotificationInfomPm"]
    pub fn iox_ws_timed_wait(
        self_: iox_ws_t,
        timeout: timespec,
        notificationInfoArray: *mut iox_notification_info_t,
        notificationInfoArrayCapacity: u64,
        missedElements: *mut u64,
    ) -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z11iox_ws_waitP13cpp2c_WaitSetPPK16NotificationInfomPm"]
    pub fn iox_ws_wait(
        self_: iox_ws_t,
        notificationInfoArray: *mut iox_notification_info_t,
        notificationInfoArrayCapacity: u64,
        missedElements: *mut u64,
    ) -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z11iox_ws_sizeP13cpp2c_WaitSet"]
    pub fn iox_ws_size(self_: iox_ws_t) -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z15iox_ws_capacityP13cpp2c_WaitSet"]
    pub fn iox_ws_capacity(self_: iox_ws_t) -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z27iox_ws_mark_for_destructionP13cpp2c_WaitSet"]
    pub fn iox_ws_mark_for_destruction(self_: iox_ws_t);
}
extern "C" {
    #[link_name = "\u{1}_Z30iox_ws_attach_subscriber_stateP13cpp2c_WaitSetP16cpp2c_Subscriber19iox_SubscriberStatemPFvS2_E"]
    pub fn iox_ws_attach_subscriber_state(
        self_: iox_ws_t,
        subscriber: iox_sub_t,
        subscriberState: iox_SubscriberState,
        id: u64,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: iox_sub_t)>,
    ) -> iox_WaitSetResult;
}
extern "C" {
    #[link_name = "\u{1}_Z48iox_ws_attach_subscriber_state_with_context_dataP13cpp2c_WaitSetP16cpp2c_Subscriber19iox_SubscriberStatemPFvS2_PvES4_"]
    pub fn iox_ws_attach_subscriber_state_with_context_data(
        self_: iox_ws_t,
        subscriber: iox_sub_t,
        subscriberState: iox_SubscriberState,
        id: u64,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: iox_sub_t, arg2: *mut ::std::os::raw::c_void),
        >,
        contextData: *mut ::std::os::raw::c_void,
    ) -> iox_WaitSetResult;
}
extern "C" {
    #[link_name = "\u{1}_Z30iox_ws_attach_subscriber_eventP13cpp2c_WaitSetP16cpp2c_Subscriber19iox_SubscriberEventmPFvS2_E"]
    pub fn iox_ws_attach_subscriber_event(
        self_: iox_ws_t,
        subscriber: iox_sub_t,
        subscriberEvent: iox_SubscriberEvent,
        eventId: u64,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: iox_sub_t)>,
    ) -> iox_WaitSetResult;
}
extern "C" {
    #[link_name = "\u{1}_Z48iox_ws_attach_subscriber_event_with_context_dataP13cpp2c_WaitSetP16cpp2c_Subscriber19iox_SubscriberEventmPFvS2_PvES4_"]
    pub fn iox_ws_attach_subscriber_event_with_context_data(
        self_: iox_ws_t,
        subscriber: iox_sub_t,
        subscriberEvent: iox_SubscriberEvent,
        eventId: u64,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: iox_sub_t, arg2: *mut ::std::os::raw::c_void),
        >,
        contextData: *mut ::std::os::raw::c_void,
    ) -> iox_WaitSetResult;
}
extern "C" {
    #[link_name = "\u{1}_Z32iox_ws_attach_user_trigger_eventP13cpp2c_WaitSetP11UserTriggermPFvS2_E"]
    pub fn iox_ws_attach_user_trigger_event(
        self_: iox_ws_t,
        userTrigger: iox_user_trigger_t,
        eventId: u64,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: iox_user_trigger_t)>,
    ) -> iox_WaitSetResult;
}
extern "C" {
    #[link_name = "\u{1}_Z50iox_ws_attach_user_trigger_event_with_context_dataP13cpp2c_WaitSetP11UserTriggermPFvS2_PvES3_"]
    pub fn iox_ws_attach_user_trigger_event_with_context_data(
        self_: iox_ws_t,
        userTrigger: iox_user_trigger_t,
        eventId: u64,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: iox_user_trigger_t, arg2: *mut ::std::os::raw::c_void),
        >,
        contextData: *mut ::std::os::raw::c_void,
    ) -> iox_WaitSetResult;
}
extern "C" {
    #[link_name = "\u{1}_Z30iox_ws_detach_subscriber_eventP13cpp2c_WaitSetP16cpp2c_Subscriber19iox_SubscriberEvent"]
    pub fn iox_ws_detach_subscriber_event(
        self_: iox_ws_t,
        subscriber: iox_sub_t,
        subscriberEvent: iox_SubscriberEvent,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z30iox_ws_detach_subscriber_stateP13cpp2c_WaitSetP16cpp2c_Subscriber19iox_SubscriberState"]
    pub fn iox_ws_detach_subscriber_state(
        self_: iox_ws_t,
        subscriber: iox_sub_t,
        subscriberState: iox_SubscriberState,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z32iox_ws_detach_user_trigger_eventP13cpp2c_WaitSetP11UserTrigger"]
    pub fn iox_ws_detach_user_trigger_event(self_: iox_ws_t, userTrigger: iox_user_trigger_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Listener {
    _unused: [u8; 0],
}
pub type iox_listener_t = *mut Listener;
extern "C" {
    #[link_name = "\u{1}_Z17iox_listener_initP23iox_listener_storage_t_"]
    pub fn iox_listener_init(self_: *mut iox_listener_storage_t) -> iox_listener_t;
}
extern "C" {
    #[link_name = "\u{1}_Z19iox_listener_deinitP8Listener"]
    pub fn iox_listener_deinit(self_: iox_listener_t);
}
extern "C" {
    #[link_name = "\u{1}_Z36iox_listener_attach_subscriber_eventP8ListenerP16cpp2c_Subscriber19iox_SubscriberEventPFvS2_E"]
    pub fn iox_listener_attach_subscriber_event(
        self_: iox_listener_t,
        subscriber: iox_sub_t,
        subscriberEvent: iox_SubscriberEvent,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: iox_sub_t)>,
    ) -> iox_ListenerResult;
}
extern "C" {
    #[link_name = "\u{1}_Z54iox_listener_attach_subscriber_event_with_context_dataP8ListenerP16cpp2c_Subscriber19iox_SubscriberEventPFvS2_PvES4_"]
    pub fn iox_listener_attach_subscriber_event_with_context_data(
        self_: iox_listener_t,
        subscriber: iox_sub_t,
        subscriberEvent: iox_SubscriberEvent,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: iox_sub_t, arg2: *mut ::std::os::raw::c_void),
        >,
        contextData: *mut ::std::os::raw::c_void,
    ) -> iox_ListenerResult;
}
extern "C" {
    #[link_name = "\u{1}_Z38iox_listener_attach_user_trigger_eventP8ListenerP11UserTriggerPFvS2_E"]
    pub fn iox_listener_attach_user_trigger_event(
        self_: iox_listener_t,
        userTrigger: iox_user_trigger_t,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: iox_user_trigger_t)>,
    ) -> iox_ListenerResult;
}
extern "C" {
    #[link_name = "\u{1}_Z56iox_listener_attach_user_trigger_event_with_context_dataP8ListenerP11UserTriggerPFvS2_PvES3_"]
    pub fn iox_listener_attach_user_trigger_event_with_context_data(
        self_: iox_listener_t,
        userTrigger: iox_user_trigger_t,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: iox_user_trigger_t, arg2: *mut ::std::os::raw::c_void),
        >,
        contextData: *mut ::std::os::raw::c_void,
    ) -> iox_ListenerResult;
}
extern "C" {
    #[link_name = "\u{1}_Z36iox_listener_detach_subscriber_eventP8ListenerP16cpp2c_Subscriber19iox_SubscriberEvent"]
    pub fn iox_listener_detach_subscriber_event(
        self_: iox_listener_t,
        subscriber: iox_sub_t,
        subscriberEvent: iox_SubscriberEvent,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z38iox_listener_detach_user_trigger_eventP8ListenerP11UserTrigger"]
    pub fn iox_listener_detach_user_trigger_event(
        self_: iox_listener_t,
        userTrigger: iox_user_trigger_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z17iox_listener_sizeP8Listener"]
    pub fn iox_listener_size(self_: iox_listener_t) -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z21iox_listener_capacityP8Listener"]
    pub fn iox_listener_capacity(self_: iox_listener_t) -> u64;
}
pub const iox_LogLevel_Iceoryx_LogLevel_Off: iox_LogLevel = 0;
pub const iox_LogLevel_Iceoryx_LogLevel_Verbose: iox_LogLevel = 1;
pub const iox_LogLevel_Iceoryx_LogLevel_Debug: iox_LogLevel = 2;
pub const iox_LogLevel_Iceoryx_LogLevel_Info: iox_LogLevel = 3;
pub const iox_LogLevel_Iceoryx_LogLevel_Warn: iox_LogLevel = 4;
pub const iox_LogLevel_Iceoryx_LogLevel_Error: iox_LogLevel = 5;
pub const iox_LogLevel_Iceoryx_LogLevel_Fatal: iox_LogLevel = 6;
pub type iox_LogLevel = ::std::os::raw::c_uint;
extern "C" {
    #[link_name = "\u{1}_Z16iox_set_loglevel12iox_LogLevel"]
    pub fn iox_set_loglevel(level: iox_LogLevel);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
