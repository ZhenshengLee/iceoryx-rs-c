/* automatically generated by rust-bindgen 0.58.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const IOX_C_CHUNK_DEFAULT_USER_PAYLOAD_ALIGNMENT: u32 = 8;
pub const IOX_C_CHUNK_NO_USER_HEADER_SIZE: u32 = 0;
pub const IOX_C_CHUNK_NO_USER_HEADER_ALIGNMENT: u32 = 1;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const iox_SubscriberState_SubscriberState_HAS_DATA: iox_SubscriberState = 0;
pub type iox_SubscriberState = ::std::os::raw::c_uint;
pub const iox_SubscriberEvent_SubscriberEvent_DATA_RECEIVED: iox_SubscriberEvent = 0;
pub type iox_SubscriberEvent = ::std::os::raw::c_uint;
pub const iox_SubscribeState_SubscribeState_NOT_SUBSCRIBED: iox_SubscribeState = 0;
pub const iox_SubscribeState_SubscribeState_SUBSCRIBE_REQUESTED: iox_SubscribeState = 1;
pub const iox_SubscribeState_SubscribeState_SUBSCRIBED: iox_SubscribeState = 2;
pub const iox_SubscribeState_SubscribeState_UNSUBSCRIBE_REQUESTED: iox_SubscribeState = 3;
pub const iox_SubscribeState_SubscribeState_WAIT_FOR_OFFER: iox_SubscribeState = 4;
pub const iox_SubscribeState_SubscribeState_UNDEFINED_ERROR: iox_SubscribeState = 5;
pub type iox_SubscribeState = ::std::os::raw::c_uint;
pub const iox_ChunkReceiveResult_ChunkReceiveResult_TOO_MANY_CHUNKS_HELD_IN_PARALLEL:
    iox_ChunkReceiveResult = 0;
pub const iox_ChunkReceiveResult_ChunkReceiveResult_NO_CHUNK_AVAILABLE: iox_ChunkReceiveResult = 1;
pub const iox_ChunkReceiveResult_ChunkReceiveResult_UNDEFINED_ERROR: iox_ChunkReceiveResult = 2;
pub const iox_ChunkReceiveResult_ChunkReceiveResult_SUCCESS: iox_ChunkReceiveResult = 3;
pub type iox_ChunkReceiveResult = ::std::os::raw::c_uint;
pub const iox_QueueFullPolicy_QueueFullPolicy_BLOCK_PUBLISHER: iox_QueueFullPolicy = 0;
pub const iox_QueueFullPolicy_QueueFullPolicy_DISCARD_OLDEST_DATA: iox_QueueFullPolicy = 1;
pub type iox_QueueFullPolicy = ::std::os::raw::c_uint;
pub const iox_SubscriberTooSlowPolicy_SubscriberTooSlowPolicy_WAIT_FOR_SUBSCRIBER:
    iox_SubscriberTooSlowPolicy = 0;
pub const iox_SubscriberTooSlowPolicy_SubscriberTooSlowPolicy_DISCARD_OLDEST_DATA:
    iox_SubscriberTooSlowPolicy = 1;
pub type iox_SubscriberTooSlowPolicy = ::std::os::raw::c_uint;
pub const iox_AllocationResult_AllocationResult_RUNNING_OUT_OF_CHUNKS: iox_AllocationResult = 0;
pub const iox_AllocationResult_AllocationResult_TOO_MANY_CHUNKS_ALLOCATED_IN_PARALLEL:
    iox_AllocationResult = 1;
pub const iox_AllocationResult_AllocationResult_INVALID_CHUNK: iox_AllocationResult = 2;
pub const iox_AllocationResult_AllocationResult_INVALID_PARAMETER_FOR_USER_PAYLOAD_OR_USER_HEADER : iox_AllocationResult = 3 ;
pub const iox_AllocationResult_AllocationResult_UNDEFINED_ERROR: iox_AllocationResult = 4;
pub const iox_AllocationResult_AllocationResult_INVALID_PARAMETER_FOR_CHUNK: iox_AllocationResult =
    5;
pub const iox_AllocationResult_AllocationResult_SUCCESS: iox_AllocationResult = 6;
pub type iox_AllocationResult = ::std::os::raw::c_uint;
pub const iox_WaitSetResult_WaitSetResult_WAIT_SET_FULL: iox_WaitSetResult = 0;
pub const iox_WaitSetResult_WaitSetResult_ALREADY_ATTACHED: iox_WaitSetResult = 1;
pub const iox_WaitSetResult_WaitSetResult_UNDEFINED_ERROR: iox_WaitSetResult = 2;
pub const iox_WaitSetResult_WaitSetResult_SUCCESS: iox_WaitSetResult = 3;
pub type iox_WaitSetResult = ::std::os::raw::c_uint;
pub const iox_ListenerResult_ListenerResult_LISTENER_FULL: iox_ListenerResult = 0;
pub const iox_ListenerResult_ListenerResult_EVENT_ALREADY_ATTACHED: iox_ListenerResult = 1;
pub const iox_ListenerResult_ListenerResult_EMPTY_INVALIDATION_CALLBACK: iox_ListenerResult = 2;
pub const iox_ListenerResult_ListenerResult_UNDEFINED_ERROR: iox_ListenerResult = 3;
pub const iox_ListenerResult_ListenerResult_SUCCESS: iox_ListenerResult = 4;
pub type iox_ListenerResult = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iox_service_description_t {
    pub serviceId: u16,
    pub instanceId: u16,
    pub eventId: u16,
    pub serviceString: [::std::os::raw::c_char; 100usize],
    pub instanceString: [::std::os::raw::c_char; 100usize],
    pub eventString: [::std::os::raw::c_char; 100usize],
}
#[test]
fn bindgen_test_layout_iox_service_description_t() {
    assert_eq!(
        ::std::mem::size_of::<iox_service_description_t>(),
        306usize,
        concat!("Size of: ", stringify!(iox_service_description_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_service_description_t>(),
        2usize,
        concat!("Alignment of ", stringify!(iox_service_description_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_service_description_t>())).serviceId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_service_description_t),
            "::",
            stringify!(serviceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_service_description_t>())).instanceId as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_service_description_t),
            "::",
            stringify!(instanceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_service_description_t>())).eventId as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_service_description_t),
            "::",
            stringify!(eventId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_service_description_t>())).serviceString as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_service_description_t),
            "::",
            stringify!(serviceString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_service_description_t>())).instanceString as *const _
                as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_service_description_t),
            "::",
            stringify!(instanceString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_service_description_t>())).eventString as *const _ as usize
        },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_service_description_t),
            "::",
            stringify!(eventString)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iox_ws_storage_t_ {
    pub do_not_touch_me: [u64; 2965usize],
}
#[test]
fn bindgen_test_layout_iox_ws_storage_t_() {
    assert_eq!(
        ::std::mem::size_of::<iox_ws_storage_t_>(),
        23720usize,
        concat!("Size of: ", stringify!(iox_ws_storage_t_))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_ws_storage_t_>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_ws_storage_t_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_ws_storage_t_>())).do_not_touch_me as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_ws_storage_t_),
            "::",
            stringify!(do_not_touch_me)
        )
    );
}
pub type iox_ws_storage_t = iox_ws_storage_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iox_user_trigger_storage_t_ {
    pub do_not_touch_me: [u64; 14usize],
}
#[test]
fn bindgen_test_layout_iox_user_trigger_storage_t_() {
    assert_eq!(
        ::std::mem::size_of::<iox_user_trigger_storage_t_>(),
        112usize,
        concat!("Size of: ", stringify!(iox_user_trigger_storage_t_))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_user_trigger_storage_t_>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_user_trigger_storage_t_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_user_trigger_storage_t_>())).do_not_touch_me as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_user_trigger_storage_t_),
            "::",
            stringify!(do_not_touch_me)
        )
    );
}
pub type iox_user_trigger_storage_t = iox_user_trigger_storage_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iox_sub_storage_t_ {
    pub do_not_touch_me: [u64; 14usize],
}
#[test]
fn bindgen_test_layout_iox_sub_storage_t_() {
    assert_eq!(
        ::std::mem::size_of::<iox_sub_storage_t_>(),
        112usize,
        concat!("Size of: ", stringify!(iox_sub_storage_t_))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_sub_storage_t_>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_sub_storage_t_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_sub_storage_t_>())).do_not_touch_me as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_storage_t_),
            "::",
            stringify!(do_not_touch_me)
        )
    );
}
pub type iox_sub_storage_t = iox_sub_storage_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iox_pub_storage_t_ {
    pub do_not_touch_me: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_iox_pub_storage_t_() {
    assert_eq!(
        ::std::mem::size_of::<iox_pub_storage_t_>(),
        16usize,
        concat!("Size of: ", stringify!(iox_pub_storage_t_))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_pub_storage_t_>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_pub_storage_t_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_pub_storage_t_>())).do_not_touch_me as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_pub_storage_t_),
            "::",
            stringify!(do_not_touch_me)
        )
    );
}
pub type iox_pub_storage_t = iox_pub_storage_t_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iox_listener_storage_t_ {
    pub do_not_touch_me: [u64; 2567usize],
}
#[test]
fn bindgen_test_layout_iox_listener_storage_t_() {
    assert_eq!(
        ::std::mem::size_of::<iox_listener_storage_t_>(),
        20536usize,
        concat!("Size of: ", stringify!(iox_listener_storage_t_))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_listener_storage_t_>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_listener_storage_t_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_listener_storage_t_>())).do_not_touch_me as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_listener_storage_t_),
            "::",
            stringify!(do_not_touch_me)
        )
    );
}
pub type iox_listener_storage_t = iox_listener_storage_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iox_chunk_header_t {
    pub do_not_touch_me: [u8; 1usize],
}
#[test]
fn bindgen_test_layout_iox_chunk_header_t() {
    assert_eq!(
        ::std::mem::size_of::<iox_chunk_header_t>(),
        1usize,
        concat!("Size of: ", stringify!(iox_chunk_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_chunk_header_t>(),
        1usize,
        concat!("Alignment of ", stringify!(iox_chunk_header_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_chunk_header_t>())).do_not_touch_me as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_chunk_header_t),
            "::",
            stringify!(do_not_touch_me)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpp2c_Subscriber {
    _unused: [u8; 0],
}
pub type iox_sub_t = *mut cpp2c_Subscriber;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iox_sub_options_t {
    pub queueCapacity: u64,
    pub historyRequest: u64,
    pub nodeName: *const ::std::os::raw::c_char,
    pub subscribeOnCreate: bool,
    pub queueFullPolicy: iox_QueueFullPolicy,
    pub initCheck: u64,
}
#[test]
fn bindgen_test_layout_iox_sub_options_t() {
    assert_eq!(
        ::std::mem::size_of::<iox_sub_options_t>(),
        40usize,
        concat!("Size of: ", stringify!(iox_sub_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_sub_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_sub_options_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iox_sub_options_t>())).queueCapacity as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_options_t),
            "::",
            stringify!(queueCapacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_sub_options_t>())).historyRequest as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_options_t),
            "::",
            stringify!(historyRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iox_sub_options_t>())).nodeName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_options_t),
            "::",
            stringify!(nodeName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_sub_options_t>())).subscribeOnCreate as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_options_t),
            "::",
            stringify!(subscribeOnCreate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_sub_options_t>())).queueFullPolicy as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_options_t),
            "::",
            stringify!(queueFullPolicy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iox_sub_options_t>())).initCheck as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_sub_options_t),
            "::",
            stringify!(initCheck)
        )
    );
}
extern "C" {
    pub fn iox_sub_options_init(options: *mut iox_sub_options_t);
}
extern "C" {
    pub fn iox_sub_options_is_initialized(options: *const iox_sub_options_t) -> bool;
}
extern "C" {
    pub fn iox_sub_init(
        self_: *mut iox_sub_storage_t,
        service: *const ::std::os::raw::c_char,
        instance: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        options: *const iox_sub_options_t,
    ) -> iox_sub_t;
}
extern "C" {
    pub fn iox_sub_deinit(self_: iox_sub_t);
}
extern "C" {
    pub fn iox_sub_subscribe(self_: iox_sub_t);
}
extern "C" {
    pub fn iox_sub_unsubscribe(self_: iox_sub_t);
}
extern "C" {
    pub fn iox_sub_get_subscription_state(self_: iox_sub_t) -> iox_SubscribeState;
}
extern "C" {
    pub fn iox_sub_take_chunk(
        self_: iox_sub_t,
        userPayload: *mut *const ::std::os::raw::c_void,
    ) -> iox_ChunkReceiveResult;
}
extern "C" {
    pub fn iox_sub_release_chunk(self_: iox_sub_t, userPayload: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn iox_sub_release_queued_chunks(self_: iox_sub_t);
}
extern "C" {
    pub fn iox_sub_has_chunks(self_: iox_sub_t) -> bool;
}
extern "C" {
    pub fn iox_sub_has_lost_chunks(self_: iox_sub_t) -> bool;
}
extern "C" {
    pub fn iox_sub_get_service_description(self_: iox_sub_t) -> iox_service_description_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UserTrigger {
    _unused: [u8; 0],
}
pub type iox_user_trigger_t = *mut UserTrigger;
extern "C" {
    pub fn iox_user_trigger_init(self_: *mut iox_user_trigger_storage_t) -> iox_user_trigger_t;
}
extern "C" {
    pub fn iox_user_trigger_deinit(self_: iox_user_trigger_t);
}
extern "C" {
    pub fn iox_user_trigger_trigger(self_: iox_user_trigger_t);
}
extern "C" {
    pub fn iox_user_trigger_has_triggered(self_: iox_user_trigger_t) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NotificationInfo {
    _unused: [u8; 0],
}
pub type iox_notification_info_t = *const NotificationInfo;
extern "C" {
    pub fn iox_notification_info_get_notification_id(self_: iox_notification_info_t) -> u64;
}
extern "C" {
    pub fn iox_notification_info_does_originate_from_subscriber(
        self_: iox_notification_info_t,
        subscriber: iox_sub_t,
    ) -> bool;
}
extern "C" {
    pub fn iox_notification_info_does_originate_from_user_trigger(
        self_: iox_notification_info_t,
        user_trigger: iox_user_trigger_t,
    ) -> bool;
}
extern "C" {
    pub fn iox_notification_info_get_subscriber_origin(self_: iox_notification_info_t)
        -> iox_sub_t;
}
extern "C" {
    pub fn iox_notification_info_get_user_trigger_origin(
        self_: iox_notification_info_t,
    ) -> iox_user_trigger_t;
}
extern "C" {
    pub fn iox_notification_info_call(self_: iox_notification_info_t);
}
extern "C" {
    pub fn iox_chunk_header_to_user_payload(
        chunkHeader: *mut iox_chunk_header_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn iox_chunk_header_to_user_payload_const(
        chunkHeader: *const iox_chunk_header_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn iox_chunk_header_to_user_header(
        chunkHeader: *mut iox_chunk_header_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn iox_chunk_header_to_user_header_const(
        chunkHeader: *const iox_chunk_header_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn iox_chunk_header_from_user_payload(
        userPayload: *mut ::std::os::raw::c_void,
    ) -> *mut iox_chunk_header_t;
}
extern "C" {
    pub fn iox_chunk_header_from_user_payload_const(
        userPayload: *const ::std::os::raw::c_void,
    ) -> *const iox_chunk_header_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeData {
    _unused: [u8; 0],
}
pub type iox_node_t = *mut NodeData;
extern "C" {
    pub fn iox_node_create(nodeName: *const ::std::os::raw::c_char) -> iox_node_t;
}
extern "C" {
    pub fn iox_node_destroy(self_: iox_node_t);
}
extern "C" {
    pub fn iox_node_get_name(
        self_: iox_node_t,
        name: *mut ::std::os::raw::c_char,
        nameCapacity: u64,
    ) -> u64;
}
extern "C" {
    pub fn iox_node_get_runtime_name(
        self_: iox_node_t,
        name: *mut ::std::os::raw::c_char,
        nameCapacity: u64,
    ) -> u64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpp2c_Publisher {
    _unused: [u8; 0],
}
pub type iox_pub_t = *mut cpp2c_Publisher;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iox_pub_options_t {
    pub historyCapacity: u64,
    pub nodeName: *const ::std::os::raw::c_char,
    pub offerOnCreate: bool,
    pub subscriberTooSlowPolicy: iox_SubscriberTooSlowPolicy,
    pub initCheck: u64,
}
#[test]
fn bindgen_test_layout_iox_pub_options_t() {
    assert_eq!(
        ::std::mem::size_of::<iox_pub_options_t>(),
        32usize,
        concat!("Size of: ", stringify!(iox_pub_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iox_pub_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(iox_pub_options_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_pub_options_t>())).historyCapacity as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_pub_options_t),
            "::",
            stringify!(historyCapacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iox_pub_options_t>())).nodeName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_pub_options_t),
            "::",
            stringify!(nodeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iox_pub_options_t>())).offerOnCreate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_pub_options_t),
            "::",
            stringify!(offerOnCreate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iox_pub_options_t>())).subscriberTooSlowPolicy as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_pub_options_t),
            "::",
            stringify!(subscriberTooSlowPolicy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iox_pub_options_t>())).initCheck as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iox_pub_options_t),
            "::",
            stringify!(initCheck)
        )
    );
}
extern "C" {
    pub fn iox_pub_options_init(options: *mut iox_pub_options_t);
}
extern "C" {
    pub fn iox_pub_options_is_initialized(options: *const iox_pub_options_t) -> bool;
}
extern "C" {
    pub fn iox_pub_init(
        self_: *mut iox_pub_storage_t,
        service: *const ::std::os::raw::c_char,
        instance: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        options: *const iox_pub_options_t,
    ) -> iox_pub_t;
}
extern "C" {
    pub fn iox_pub_deinit(self_: iox_pub_t);
}
extern "C" {
    pub fn iox_pub_loan_chunk(
        self_: iox_pub_t,
        userPayload: *mut *mut ::std::os::raw::c_void,
        userPayloadSize: u32,
    ) -> iox_AllocationResult;
}
extern "C" {
    pub fn iox_pub_loan_aligned_chunk(
        self_: iox_pub_t,
        userPayload: *mut *mut ::std::os::raw::c_void,
        userPayloadSize: u32,
        userPayloadAlignment: u32,
    ) -> iox_AllocationResult;
}
extern "C" {
    pub fn iox_pub_loan_aligned_chunk_with_user_header(
        self_: iox_pub_t,
        userPayload: *mut *mut ::std::os::raw::c_void,
        userPayloadSize: u32,
        userPayloadAlignment: u32,
        userHeaderSize: u32,
        userHeaderAlignment: u32,
    ) -> iox_AllocationResult;
}
extern "C" {
    pub fn iox_pub_release_chunk(self_: iox_pub_t, userPayload: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn iox_pub_publish_chunk(self_: iox_pub_t, userPayload: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn iox_pub_offer(self_: iox_pub_t);
}
extern "C" {
    pub fn iox_pub_stop_offer(self_: iox_pub_t);
}
extern "C" {
    pub fn iox_pub_is_offered(self_: iox_pub_t) -> bool;
}
extern "C" {
    pub fn iox_pub_has_subscribers(self_: iox_pub_t) -> bool;
}
extern "C" {
    pub fn iox_pub_get_service_description(self_: iox_pub_t) -> iox_service_description_t;
}
extern "C" {
    pub fn iox_runtime_init(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn iox_runtime_get_instance_name(name: *mut ::std::os::raw::c_char, nameLength: u64)
        -> u64;
}
extern "C" {
    pub fn iox_runtime_shutdown();
}
pub type size_t = ::std::os::raw::c_ulong;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpp2c_WaitSet {
    _unused: [u8; 0],
}
pub type iox_ws_t = *mut cpp2c_WaitSet;
extern "C" {
    pub fn iox_ws_init(self_: *mut iox_ws_storage_t) -> iox_ws_t;
}
extern "C" {
    pub fn iox_ws_deinit(self_: iox_ws_t);
}
extern "C" {
    pub fn iox_ws_timed_wait(
        self_: iox_ws_t,
        timeout: timespec,
        notificationInfoArray: *mut iox_notification_info_t,
        notificationInfoArrayCapacity: u64,
        missedElements: *mut u64,
    ) -> u64;
}
extern "C" {
    pub fn iox_ws_wait(
        self_: iox_ws_t,
        notificationInfoArray: *mut iox_notification_info_t,
        notificationInfoArrayCapacity: u64,
        missedElements: *mut u64,
    ) -> u64;
}
extern "C" {
    pub fn iox_ws_size(self_: iox_ws_t) -> u64;
}
extern "C" {
    pub fn iox_ws_capacity(self_: iox_ws_t) -> u64;
}
extern "C" {
    pub fn iox_ws_mark_for_destruction(self_: iox_ws_t);
}
extern "C" {
    pub fn iox_ws_attach_subscriber_state(
        self_: iox_ws_t,
        subscriber: iox_sub_t,
        subscriberState: iox_SubscriberState,
        id: u64,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: iox_sub_t)>,
    ) -> iox_WaitSetResult;
}
extern "C" {
    pub fn iox_ws_attach_subscriber_state_with_context_data(
        self_: iox_ws_t,
        subscriber: iox_sub_t,
        subscriberState: iox_SubscriberState,
        id: u64,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: iox_sub_t, arg2: *mut ::std::os::raw::c_void),
        >,
        contextData: *mut ::std::os::raw::c_void,
    ) -> iox_WaitSetResult;
}
extern "C" {
    pub fn iox_ws_attach_subscriber_event(
        self_: iox_ws_t,
        subscriber: iox_sub_t,
        subscriberEvent: iox_SubscriberEvent,
        eventId: u64,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: iox_sub_t)>,
    ) -> iox_WaitSetResult;
}
extern "C" {
    pub fn iox_ws_attach_subscriber_event_with_context_data(
        self_: iox_ws_t,
        subscriber: iox_sub_t,
        subscriberEvent: iox_SubscriberEvent,
        eventId: u64,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: iox_sub_t, arg2: *mut ::std::os::raw::c_void),
        >,
        contextData: *mut ::std::os::raw::c_void,
    ) -> iox_WaitSetResult;
}
extern "C" {
    pub fn iox_ws_attach_user_trigger_event(
        self_: iox_ws_t,
        userTrigger: iox_user_trigger_t,
        eventId: u64,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: iox_user_trigger_t)>,
    ) -> iox_WaitSetResult;
}
extern "C" {
    pub fn iox_ws_attach_user_trigger_event_with_context_data(
        self_: iox_ws_t,
        userTrigger: iox_user_trigger_t,
        eventId: u64,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: iox_user_trigger_t, arg2: *mut ::std::os::raw::c_void),
        >,
        contextData: *mut ::std::os::raw::c_void,
    ) -> iox_WaitSetResult;
}
extern "C" {
    pub fn iox_ws_detach_subscriber_event(
        self_: iox_ws_t,
        subscriber: iox_sub_t,
        subscriberEvent: iox_SubscriberEvent,
    );
}
extern "C" {
    pub fn iox_ws_detach_subscriber_state(
        self_: iox_ws_t,
        subscriber: iox_sub_t,
        subscriberState: iox_SubscriberState,
    );
}
extern "C" {
    pub fn iox_ws_detach_user_trigger_event(self_: iox_ws_t, userTrigger: iox_user_trigger_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Listener {
    _unused: [u8; 0],
}
pub type iox_listener_t = *mut Listener;
extern "C" {
    pub fn iox_listener_init(self_: *mut iox_listener_storage_t) -> iox_listener_t;
}
extern "C" {
    pub fn iox_listener_deinit(self_: iox_listener_t);
}
extern "C" {
    pub fn iox_listener_attach_subscriber_event(
        self_: iox_listener_t,
        subscriber: iox_sub_t,
        subscriberEvent: iox_SubscriberEvent,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: iox_sub_t)>,
    ) -> iox_ListenerResult;
}
extern "C" {
    pub fn iox_listener_attach_subscriber_event_with_context_data(
        self_: iox_listener_t,
        subscriber: iox_sub_t,
        subscriberEvent: iox_SubscriberEvent,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: iox_sub_t, arg2: *mut ::std::os::raw::c_void),
        >,
        contextData: *mut ::std::os::raw::c_void,
    ) -> iox_ListenerResult;
}
extern "C" {
    pub fn iox_listener_attach_user_trigger_event(
        self_: iox_listener_t,
        userTrigger: iox_user_trigger_t,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: iox_user_trigger_t)>,
    ) -> iox_ListenerResult;
}
extern "C" {
    pub fn iox_listener_attach_user_trigger_event_with_context_data(
        self_: iox_listener_t,
        userTrigger: iox_user_trigger_t,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: iox_user_trigger_t, arg2: *mut ::std::os::raw::c_void),
        >,
        contextData: *mut ::std::os::raw::c_void,
    ) -> iox_ListenerResult;
}
extern "C" {
    pub fn iox_listener_detach_subscriber_event(
        self_: iox_listener_t,
        subscriber: iox_sub_t,
        subscriberEvent: iox_SubscriberEvent,
    );
}
extern "C" {
    pub fn iox_listener_detach_user_trigger_event(
        self_: iox_listener_t,
        userTrigger: iox_user_trigger_t,
    );
}
extern "C" {
    pub fn iox_listener_size(self_: iox_listener_t) -> u64;
}
extern "C" {
    pub fn iox_listener_capacity(self_: iox_listener_t) -> u64;
}
pub const iox_LogLevel_Iceoryx_LogLevel_Off: iox_LogLevel = 0;
pub const iox_LogLevel_Iceoryx_LogLevel_Verbose: iox_LogLevel = 1;
pub const iox_LogLevel_Iceoryx_LogLevel_Debug: iox_LogLevel = 2;
pub const iox_LogLevel_Iceoryx_LogLevel_Info: iox_LogLevel = 3;
pub const iox_LogLevel_Iceoryx_LogLevel_Warn: iox_LogLevel = 4;
pub const iox_LogLevel_Iceoryx_LogLevel_Error: iox_LogLevel = 5;
pub const iox_LogLevel_Iceoryx_LogLevel_Fatal: iox_LogLevel = 6;
pub type iox_LogLevel = ::std::os::raw::c_uint;
extern "C" {
    pub fn iox_set_loglevel(level: iox_LogLevel);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
